///**
// * Transition
// * 
// * Animate a change between different object states.
// * 
// * @ABOUT
// * You can use this class to animate change of up to 5 different properties.
// * If you need more that that (wow!) it's easy to add more of these classes.
// * 
// * Transition takes 4 values:
// * -- transition-property - choose a property you want to animate (margin, colour etc.).
// * 	Default value is "all" which will animate every change that might happen. It's a good
// * 	idea to explicitly write this value if you want to animate everything, though. We can't
// * 	be sure if in the future default state won't change to "none", which will break the whole transition.
// * -- transition-duration - specifies how long transition animation will have to take
// *    until animation is finished. Put values in s (seconds) or ms (milliseconds).
// * 	Required value, since default state is 0s (no animation occurs).
// * -- transition-timing-function - this value describe an acceleration function. It can
// *    really affect overall experience, so it's good idea to pay attention to that.
// * 	Timing function takes 4 number values of keywords: linear, ease, ease-in,
// * 	ease-in-out, ease-out. For further explanation refer to ->developer.mozilla.org/en/CSS/timing-function
// * 	Default value is "ease".
// * -- transition-delay - in seconds or millisecond describes how long transition will wait
// * 	until it occurs after a triggering requirement was met. Default value is 0 - instant animation.
// * 
// * In case you want to put a transformation property into transition effect, use
// * the .transition-transform class. This class is prepared to automatically add
// * many browsers prefixes required in that case. It is also a bit future friendly,
// * but all at all using transitions on transform is very risky.
// * -> http://radiatingstar.com/transition-with-transform-cant-be-future-proof
// * 
// * @USAGE
// * For .transition class, put in brackets at least a time value. If you want to animate more than one
// * property or animate everything with different functions, put up to 5 declarations separated with
// * commas. If one of the property you want to animate is "transform" _and_ you want to animate every
// * other properties (or at least not with the same functions), use .transition-transform. As a first
// * value put a time duration for transform property. Do not write this property though. It's auto-added
// * for the first set of values. Add other properties after commas. Refer to the example 3.
// * 
// * @EXAMPLES
// * 1. .transition (all 1s); // Animate all properties for 1 second.
// * 2. .transition (background-color 5s, margin 1s linear 5s) // Animate change of background-color for 5s
// * 														   // and after 5s animate margin change for 1s.
// * 3. .transition-transform (2s linear, padding 3s) // Animate change of transform property (no "transform" declared!)
// * 												  // and padding property.
// * 
// * @BROWSERS SUPPORT
// * IE10+ and every other (except for Opera Mini)
// * 
// * @LINKS
// * * https://developer.mozilla.org/en-US/docs/CSS/transition
// * * http://caniuse.com/#feat=css-transitions
// **/

.transition(@transition1, @transition2:X, ...){
	@transitions: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
    -webkit-transition: @transitions;
    transition: @transitions;
}
.transition-transform (@transformArguments1, @transformArguments2:X, ...) {
	@transformArguments: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
	-webkit-transition: -webkit-transform @transformArguments;
	transition: transform @transformArguments;
}
.transition-property(@property1, @property2:X, ...) {
	@properties: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
	-webkit-transition-property: @properties;
	transition-property: @@properties;
}
.transition-duration(@property1, @property2:X, ...) {
	@properties: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
	-webkit-transition-duration: @properties;
	transition-duration: @properties;
}
.transition-timing-function(@property1, @property2:X, ...) {
	@properties: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
	-webkit-transition-timing-function: @properties;
	transition-timing-function: @properties;
}
.transition-delay(@property1, @property2:X, ...) {
	@properties: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
	-webkit-transition-delay: @properties;
	transition-delay: @properties;
}

///**
// * Animations
// * 
// * Create an awesome animation!
// * 
// * @ABOUT
// * This class takes from two to five properties:
// * -- animation-name [required] - declare your @keyframes animation name. See below
// * 	for an easy way to make @keyframes!
// * -- animation-duration [required] - declare how long will it take for an animation
// * 	to reach end. Value in seconds (s) or milliseconds (ms).
// * -- timing-function - it's the same property as in transition. Refer to
// * 	that topic for further explanation.
// * -- iteration-count - how many times an animation will repeat. It takes integer
// * 	or "infinite" keyword (for infinite repetition). Default value is 1.
// * -- direction - indicates whether the animation should play in reverse on
// * 	alternate cycles. Refer to ->developer.mozilla.org/en/CSS/animation-direction
// * 	for better explanation. To declare a direction use normal [default value],
// * 	alternate, reverse or alternate-reverse keyword.
// * 
// * @USAGE
// * Creating @keyframes
// * Write in your .less file:
// * *** @import 'animationX.less';
// * where X stands for a number between 1 and 5. Then create a class
// * *** .animationX () {}
// * and in {} write declarations you normally write in @keyframes.
// * Then just put an .animation(animationX [other animation properties]) class in your element.
// * That's all!
// *
// * @EXAMPLES
// * .toBeAnimated {
// * 	// Animation with every possible value declared. //
// *	.animation(animation1 5s linear 3s infinite alternate);
// * }
// * // Importing prefixed @keyframes for animation1.
// * @import '3L/assets/animations/animation1';
// *
// * // Declaring @keyframes for animation. Only once! 
// * .animation1() {
// *	from {margin-top: 3px;}
// *	to {margin-top: 333px;}
// * }
// *
// * @BROWSERS SUPPORT
// * IE10+ and every other (except for Opera Mini)
// *
// * @LINKS
// * * http://developer.mozilla.org/en/CSS/animation
// * * http://caniuse.com/#feat=css-animation
// **/

.animation (...) {
	-webkit-animation: @arguments;
	animation: @arguments;
	}
.animate (...) {.animation(@arguments);}
.anime (...) {.animation(@arguments);}
.animation-name(...) {
	-webkit-animation-name: @arguments;
	animation-name: @arguments;
}
.animation-duration(...) {
	-webkit-animation-duration: @arguments;
	animation-duration: @arguments;
}
.animation-timing-function(...) {
	-webkit-animation-timing-function: @arguments;
	animation-timing-function: @arguments;
}
.animation-delay(...) {
	-webkit-animation-delay: @arguments;
	animation-delay: @arguments;
}
.animation-iteration-count(...) {
	-webkit-animation-iteration-count: @arguments;
	animation-iteration-count: @arguments;
}
.animation-direction(...) {
	-webkit-animation-direction: @arguments;
	animation-direction: @arguments;
}
.animation-fill-mode(...) {
	-webkit-animation-fill-mode: @arguments;
	animation-fill-mode: @arguments;
}