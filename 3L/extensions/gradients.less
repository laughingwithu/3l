///**
// * Gradient
// *
// * Create a beautiful gradient without images.
// *
// * @USAGE
// * Pick a type of a gradient you want to have and put colours as arguments.
// * You can put either two or three colours. In the first case
// * you type only the gradient's colours. Three arguments gradient mixins
// * will use the third colour as background-color.
// *
// * The default class - .gradient - is the same as .vertical-gradient.
// *
// * You can choose from four types of gradients:
// * 1. Vertical - colour will change from top to bottom.
// * 2. Horizontal - change is from left to right.
// * 3. Diagonal - from top-left to bottom-right.
// * 4. Radial - from the centre of an element to its borders.
// *
// * @BROWSERS SUPPORT
// * IE10 and every other except Opera Mini.
// * Some gradients can be achieved in older IE by using non-standard properties.
// * 
// * @LINKS
// * * http://www.colorzilla.com/gradient-editor/ -- gradient generator with broad browsers support and some advanced options
// * * http://lea.verou.me/css3patterns/ -- gradient is a powerful tool - you can generate shapes as a background!
// * * https://developer.mozilla.org/en-US/docs/CSS/gradient
// * * http://caniuse.com/#feat=css-gradients
// *
// **/

.gradient (@color1, @color2){
	background-image: -moz-linear-gradient(top, @color1 0%, @color2 100%);
	background-image: -webkit-linear-gradient(top, @color1 0%,@color2 100%);
	background-image: linear-gradient(to bottom, @color1 0%,@color2 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@{color1}', endColorstr='@{color2}',GradientType=0 );
}
.gradient (@color1, @color2, @color3){
	background-color: @color3;
	background-image: -moz-linear-gradient(top, @color1 0%, @color2 100%);
	background-image: -webkit-linear-gradient(top, @color1 0%,@color2 100%);
	background-image: linear-gradient(to bottom, @color1 0%,@color2 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@{color1}', endColorstr='@{color2}',GradientType=0 );
}
// .vertical-gradient = .gradient
.vertical-gradient (@color1,@color2) {.gradient(@color1,@color2)}
.vertical-gradient (@color1,@color2,@color3) {.gradient(@color1,@color2,@color3)}
.horizontal-gradient (@color1, @color2) {
	background-image: -moz-linear-gradient(left, @color1 0%, @color2 100%);
	background-image: -webkit-linear-gradient(left, @color1 0%,@color2 100%);
	background-image: linear-gradient(to right, @color1 0%,@color2 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@{color1}', endColorstr='@{color2}',GradientType=1 );
}
.horizontal-gradient (@color1, @color2, @color3) {
	background-color: @color3;
	background-image: -moz-linear-gradient(left, @color1 0%, @color2 100%);
	background-image: -webkit-linear-gradient(left, @color1 0%,@color2 100%);
	background-image: linear-gradient(to right, @color1 0%,@color2 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@{color1}', endColorstr='@{color2}',GradientType=1 );
}
.diagonal-gradient (@color1, @color2) {
	background-image: -moz-linear-gradient(-45deg, @color1 0%, @color2 100%);
	background-image: -webkit-linear-gradient(-45deg, @color1 0%,@color2 100%);
	background-image: linear-gradient(135deg, @color1 0%,@color2 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@{color1}', endColorstr='@{color2}',GradientType=1 );
	}
.diagonal-gradient (@color1, @color2, @color3) {
	background-color: @color3;
	background-image: -moz-linear-gradient(-45deg, @color1 0%, @color2 100%);
	background-image: -webkit-linear-gradient(-45deg, @color1 0%,@color2 100%);
	background-image: linear-gradient(135deg, @color1 0%,@color2 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@{color1}', endColorstr='@{color2}',GradientType=1 );
	}
.radial-gradient (@color1, @color2) {
	background-image: -moz-radial-gradient(center, @color1 0%, @color2 100%);
	background-image: -webkit-radial-gradient(center, @color1 0%,@color2 100%);
	background-image: radial-gradient(at center, @color1 0%,@color2 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@{color1}', endColorstr='@{color2}',GradientType=1 );
	}
.radial-gradient (@color1, @color2, @color3) {
	background-color: @color3;
	background-image: -moz-radial-gradient(center, @color1 0%, @color2 100%);
	background-image: -webkit-radial-gradient(center, @color1 0%,@color2 100%);
	background-image: radial-gradient(at center, @color1 0%,@color2 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@{color1}', endColorstr='@{color2}',GradientType=1 );
	}

// !! WARNING !!
// MULTIPLE ARGUMENTS GRADIENT MIXINS IS IN DEVELOPEMENT AND PROBABLY WON'T WORK.
//
// * TODO: test if the beta-gradient is reverse-compatible with the old gradient.
// * FIXME: you don't need to provide the @direction value since default is "to bottom". How to make it works?
// * FIXME: simple radial-gradient should work, but what if you provide some more advanced values?
// * FIXME: does it work with "to top left" and similar or with angles?

// .gradient(@gradientType, @direction, @rest...) {
	// @valuesProcessed: ~`"@{rest}".replace(/[\[\]]/g, '')`;
	// @directionProcessedOld: ~`"@{direction}".replace(/[\[\]]|\,/g,'').replace("to ","").replace("top","bottom").replace("bottom","top").replace("right","left").replace("left","right").replace("at ","").replace("cover", "farthest-corner")`;
	// @directionProcessedNew: ~`"@{direction}".replace(/[\[\]]|\,/g,'')`; 
// 	
	// @webkit1: `"-webkit-" + "@{gradientType}" + "-gradient(" + "@{directionProcessedOld}," + "@{valuesProcessed}" + ")"`;
	// @webkit2: ~`'@{webkit1}'.replace(/\"/g, '')`;
	// background-image: @webkit2;
// 	
	// @moz1: `"-moz-" + "@{gradientType}" + "-gradient(" + "@{directionProcessedOld}," + "@{valuesProcessed}" + ")"`;
	// @moz2: ~`'@{moz1}'.replace(/\"/g, '')`;
	// background-image: @moz2;
// 	
	// @w3c1: `"@{gradientType}" + "-gradient(" + "@{directionProcessedNew}," + "@{valuesProcessed}" + ")"`;
	// @w3c2: ~`'@{w3c1}'.replace(/\"/g, '')`;
	// background-image: @w3c2;
// }